// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define MAX_STEPS 100
#define MAX_DIST 100
#define SURF_DIST 1e-3

Texture2D<float4> Source;
RWTexture2D<float4> Result;
float4x4 _CameraToWorld, _CameraInverseProjection;
float3 _WorldSpaceCameraPos;
float _Gloss;

struct LightData
{
    float3 position;
    float3 direction;
    float4 color;
    float intensity;
    float spotAngle;
    int type;
};
StructuredBuffer<LightData> lightsBuffer;

struct Ray
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

float DistanceEstimator(float3 pos)
{
    /*pos.xz = pos.xz % 1.0 - float3(.5, .5, .5);
    float dst = length(pos) - .3;
    return dst;*/

    float Scale = 2;
    float Offset = 1;
    float3 z = pos;
    float Iterations = 10;
    float r;
    int n = 0;
    while (n < Iterations) {
        if (z.x + z.y < 0) z.xy = -z.yx; // fold 1
        if (z.x + z.z < 0) z.xz = -z.zx; // fold 2
        if (z.y + z.z < 0) z.zy = -z.yz; // fold 3	
        z = z * Scale - Offset * (Scale - 1.0);
        n++;
    }
    return (length(z)) * pow(Scale, -float(n));
}

float RayMarch(float3 ro, float3 rd)
{
    float dO = 0;   // Dist from origin
    float dS;   // Dist from surface
    int i;

    // March the ray for a limited amount of steps
    for (i = 0; i < MAX_STEPS; i++)
    {
        // Calculate the current position
        float3 p = ro + dO * rd;

        // Get the distance to the scene
        float DE = DistanceEstimator(p);
        dS = DE;
        dO += dS;
        if (dS<SURF_DIST /*|| dO>MAX_DIST*/) break;
    }

    //return dO;
    return 1.0 - float(i) / float(MAX_STEPS);
}

float3 GetNormal(float3 pos)
{
    float2 e = float2(SURF_DIST, 0);
    float3 n = DistanceEstimator(pos) - float3
        (
            DistanceEstimator(pos - e.xyy),
            DistanceEstimator(pos - e.yxy),
            DistanceEstimator(pos - e.yyx)
            );
    return normalize(n);
}

float CalculateShadows(in float3 ro, in float3 rd, float mint, float maxt)
{
    for (float t = mint; t < maxt; )
    {
        float h = DistanceEstimator(ro + rd * t);
        if (h < SURF_DIST)
            return 0;
        t += h;
    }
    return 1.0;
}

float3 CalculateBlinnPhongSpecular(float3 p, float3 normal, float3 lightDirection)
{
    // Set the specular colour to white
    float3 specularColour = float3(1, 1, 1);

    // Calculate the view vector
    float3 fragToCam = _WorldSpaceCameraPos - p;
    float3 viewVector = normalize(fragToCam);

    // Get the vector that is halfway between the light direction and the view vector
    float3 halfwayVec = normalize(lightDirection + viewVector);

    // Calculate the intensity/falloff of the specular highlight
    float specularIntensity = pow(max(0, dot(normal, halfwayVec)), _Gloss);

    return saturate(specularColour * specularIntensity);
}

float3 CalculateDirectionalLight(float3 p, LightData light)
{
    float3 normal = GetNormal(p);

    // Calculate light falloff and colour
    float lightFallOff = max(0, dot(-light.direction, normal) * light.intensity);
    float3 lightColor = light.color.xyz * lightFallOff;

    // Calculate specular
    float3 specular = CalculateBlinnPhongSpecular(p, GetNormal(p), -light.direction) * lightColor;

    // Calculate shadows
    //float shadow = CalculateShadows(p, -light.direction, 1, MAX_DIST);

    return saturate(lightColor + specular);
}

float3 CalculatePointLight(float3 p, LightData light)
{
    float3 normal = GetNormal(p);

    // Calculate light falloff and colour
    float3 lightDir = normalize(light.position - p);
    float lightFallOff = max(0, dot(lightDir, normal) * light.intensity);
    float3 lightColor = light.color.xyz * lightFallOff;

    // Calculate shadows
    float shadow = CalculateShadows(p, lightDir, 5e-2, MAX_DIST);

    return lightColor * shadow;
}

float3 CalculateSpotLight(float3 p, LightData light)
{
    float3 normal = GetNormal(p);

    float3 lightVec = normalize(light.position - p);
    float cutOff = saturate(dot(-lightVec, light.direction));

    float angle = light.spotAngle / 2 * 3.1415f / 180.f;
    if (cutOff < cos(angle))
    {
        return 0;
    }

    float lightFallOff = max(0, dot(lightVec, normal) * light.intensity);
    float3 lightColor = light.color.xyz * lightFallOff;

    // Calculate shadows
    float shadow = CalculateShadows(p, lightVec, 5e-2, MAX_DIST);

    return lightColor * shadow;
}

float3 GetLightColor(float3 p, LightData light)
{
    float3 finalColor = 0;
    float3 ambientLight = float3(0.2, 0.2, 0.2);

    // Get the light type
    switch (light.type)
    {
    case 0: // SPOT
    {
        finalColor = CalculateSpotLight(p, light);
        break;
    }
    case 1: // DIRECTIONAL
    {
        finalColor = CalculateDirectionalLight(p, light);
        break;
    }
    case 2: // POINT
    {
        finalColor = CalculatePointLight(p, light);
        break;
    }
    }
    return finalColor + ambientLight;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Get the UVs of the screen
    uint width, height;
    Result.GetDimensions(width, height);
    float2 uv = id.xy / float2(width, height) * 2 - 1;

    // Set the colour to the source render texture initially
    float4 col = Source[id.xy];
    Result[id.xy] = col;

    // Calculate the ray origin and direction
    Ray cameraRay = CreateCameraRay(uv);
    float3 ro = cameraRay.origin;
    float3 rd = cameraRay.direction;

    // March the ray from the origin in the ray direction and retrieve the distance to the closest object hit
    float rayMarch = RayMarch(ro, rd);
    float dist = rayMarch;

    // If the distance was greater than or equal to the max dist then nothing was hit so return
    if (dist >= MAX_DIST)
        return;

    // Get the point of intersection
    float3 p = ro + rd * dist;
    float3 normal = GetNormal(p);
    //col.rgb = GetLightColor(p, lightsBuffer[0]);
    col.rbga = dist;

    // Set the pixel of the final render texture to the color
    Result[id.xy] = col;
}
